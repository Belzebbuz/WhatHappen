using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using WhatHappen.Generators.Decorators;
using Xunit;

namespace WhatHappen.Generators.Tests;

public class SampleIncrementalSourceGeneratorTests
{
	private const string VectorClassText = @"
namespace TestNamespace;

[Generators.Report]
public partial class Vector3
{
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
}";

	private const string ValidatorInterfaceText = @"
using DecoratorsGenerators;
using WhatHappen.Core;
using WhatHappen.Core.Tracing;
using WhatHappen.Generators;

namespace WhatHappen.TargetApp.Services;

[GenerateTrack]
public interface IValidator
{
	Task<bool> IsValidAsync(HelloRequest request);
	Task IsTaskAsync(HelloRequest request);
	Task<(bool, string)> IsTaskTupleAsync(HelloRequest request);
	IReadOnlyCollection<string> IsGenericAsync(string param1, bool param2);
	string IsStringAsync(Func<string, Task<bool>> param1);
	void VoidMethod(out int param2, string? param1 = null);
	TResult IsHardGenericAsync<T, TResult>(T param1, params string[] args)
		where T : class
		where TResult : notnull;
}

[GenerateTrack]
public interface IGenericsValidator<in TRequest, out TResult> 
	where TRequest : class 
	where TResult : notnull
{
	public IAsyncEnumerable<TResult> GetAsync(TRequest request, string? filter);
}

public record GenRequest(string Value);
public record GenRequestV2(string Value);

public readonly record struct GenResponse(string Response);

public class GenericsValidator : IGenericsValidator<GenRequest, GenResponse> 
{
	public async IAsyncEnumerable<GenResponse> GetAsync(GenRequest request, string? filter)
	{
		await Task.CompletedTask;
		yield return new GenResponse(""Result 1"");
		yield return new GenResponse(""Result 2"");
		yield return new GenResponse(""Result 3"");
	}
} 
public class GenericsValidatorV3 : IGenericsValidator<GenRequest, GenResponse> 
{
	public async IAsyncEnumerable<GenResponse> GetAsync(GenRequest request, string? filter)
	{
		await Task.CompletedTask;
		yield return new GenResponse(""Result 1"");
		yield return new GenResponse(""Result 2"");
		yield return new GenResponse(""Result 3"");
	}
} 
public class GenericsValidatorV2 : IGenericsValidator<GenRequestV2, GenResponse> 
{
	public async IAsyncEnumerable<GenResponse> GetAsync(GenRequestV2 request, string? filter)
	{
		await Task.CompletedTask;
		yield return new GenResponse(""Result 1"");
		yield return new GenResponse(""Result 2"");
		yield return new GenResponse(""Result 3"");
	}
} 
";

	private const string ExpectedGeneratedClassText = @"// <auto-generated/>

using System;
using System.Collections.Generic;

namespace TestNamespace;

partial class Vector3
{
    public IEnumerable<string> Report()
    {
        yield return $""X:{this.X}"";
        yield return $""Y:{this.Y}"";
        yield return $""Z:{this.Z}"";
    }
}
";

	[Fact]
	public void GenerateTrackingDecoratorMethod()
	{
		var generator = new DecoratorSourceGenerator();

		var driver = CSharpGeneratorDriver.Create(generator);
		
		var compilation = CSharpCompilation.Create(nameof(SampleSourceGeneratorTests),
			new[] { CSharpSyntaxTree.ParseText(ValidatorInterfaceText) },
			new[]
			{
				// To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
				MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
			});
		
		var runResult = driver.RunGenerators(compilation).GetRunResult();
		
		var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("GenerateTrackAttribute.g.cs"));

	}
	
	[Fact]
	public void GenerateReportMethod()
	{
		// Create an instance of the source generator.
		var generator = new SampleIncrementalSourceGenerator();

		// Source generators should be tested using 'GeneratorDriver'.
		var driver = CSharpGeneratorDriver.Create(generator);

		// We need to create a compilation with the required source code.
		var compilation = CSharpCompilation.Create(nameof(SampleSourceGeneratorTests),
			new[] { CSharpSyntaxTree.ParseText(VectorClassText) },
			new[]
			{
				// To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
				MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
			});

		// Run generators and retrieve all results.
		var runResult = driver.RunGenerators(compilation).GetRunResult();

		// All generated files can be found in 'RunResults.GeneratedTrees'.
		var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("Vector3.g.cs"));

		// Complex generators should be tested using text comparison.
		Assert.Equal(ExpectedGeneratedClassText, generatedFileSyntax.GetText().ToString(),
			ignoreLineEndingDifferences: true);
	}
}